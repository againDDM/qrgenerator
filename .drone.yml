---

kind: pipeline
type: kubernetes
name: develop

platform:
  os: linux
  arch: arm64

steps:
  - name: build
    image: gcr.io/kaniko-project/executor:debug
    pull: if-not-exists
    environment:
      DOCKER_PUSH_REGISTRY:
        from_secret: "docker_push_registry"
      DOCKER_CONFIG_JSON:
        from_secret: "docker_config_json"
    commands:
      - echo $${DOCKER_CONFIG_JSON} > /kaniko/.docker/config.json
      - >-
        /kaniko/executor --force
        --insecure-registry $${DOCKER_PUSH_REGISTRY}
        --context ./
        --dockerfile /Dockerfile
        --target prod
        --cache=true
        --cache-repo "$${DOCKER_PUSH_REGISTRY}/homelab/qr-front-cache"
        --destination "$${DOCKER_PUSH_REGISTRY}/homelab/qr-front:$${DRONE_BRANCH}-$${DRONE_BUILD_NUMBER}"
        --destination "$${DOCKER_PUSH_REGISTRY}/homelab/qr-front:latest"
      - echo "$${DOCKER_PUSH_REGISTRY}/homelab/qr-front:$${DRONE_BRANCH}-$${DRONE_BUILD_NUMBER}"

  - name: deploy
    image: againddm/ci-helm:v3.9.0
    pull: if-not-exists
    environment:
      DOCKER_PULL_REGISTRY:
        from_secret: "docker_pull_registry"
      K8S_TOKEN:
        from_secret: "k8s_token"
      K8S_SERVER:
        from_secret: "k8s_server"
      KUBECONFIG: "/opt/workshop/.kube/config"
    commands:
      - kubectl config set-credentials drone-deploy --token=$${K8S_TOKEN}
      - kubectl config set-cluster drone-deploy --server=$${K8S_SERVER} --insecure-skip-tls-verify=true
      - kubectl config set-context drone-deploy --cluster=drone-deploy --user=drone-deploy
      - kubectl config use-context drone-deploy
      - >-
        helm upgrade --install --namespace qrgenerator --create-namespace --debug qrgenerator ./deploy/helm
        --set frontend.deployment.containers.front.image.repository=$${DOCKER_PULL_REGISTRY}/homelab/qr-front
        --set frontend.deployment.containers.front.image.tag=$${DRONE_BRANCH}-$${DRONE_BUILD_NUMBER}
