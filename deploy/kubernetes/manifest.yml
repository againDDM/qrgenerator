---
apiVersion: v1
kind: Namespace
metadata:
  name: "qrgenerator"
...
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: qrgenerator-quota
  namespace: "qrgenerator"
spec:
  hard:
    requests.cpu: "200m"
    requests.memory: 128Mi
    limits.cpu: "300m"
    limits.memory: 196Mi
...
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-conf
  namespace: "qrgenerator"
data:
  telegraf.conf: |
    [global_tags]
      project = "qrgenerator"
    [agent]
      interval = "30s"
      logtarget = "stderr"
      omit_hostname = false
    [[inputs.nginx]]
      urls = ["http://localhost:8000/basic_status"]
      response_timeout = "5s"
    [[outputs.prometheus_client]]
      listen = ":9273"
      metric_version = 2
      path = "/metrics"
      expiration_interval = "120s"
      collectors_exclude = ["gocollector", "process"]
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qrgenerator-front
  namespace: "qrgenerator"
  labels:
    app.kubernetes.io/name: qrgenerator-front
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: qrgenerator-front
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qrgenerator-front
    spec:
      containers:
        - name: front-nginx
          imagePullPolicy: Always
          image: "registry.againddm.keenetic.pro/homelab/qr-front:latest"
          resources:
            limits:
              cpu: "100m"
              memory: "64Mi"
            requests:
              cpu: "1m"
              memory: "8Mi"
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 101
            runAsGroup: 101
          ports:
            - name: frontend-port
              containerPort: 8080
            - name: service-port
              containerPort: 8000
          startupProbe:
            httpGet:
              path: /ping
              port: service-port
            failureThreshold: 30
            periodSeconds: 1
          livenessProbe:
            httpGet:
              path: /ping
              port: service-port
            initialDelaySeconds: 5
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /
              port: frontend-port
            initialDelaySeconds: 5
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 2
          volumeMounts:
            - mountPath: /tmp
              name: nginx-tmp
        - name: telegraf-sidecar
          imagePullPolicy: Always
          image: "telegraf:1.22"
          command:
            - "telegraf"
          args:
            - "--config"
            - "/etc/telegraf/telegraf.conf"
          resources:
            limits:
              cpu: "50m"
              memory: "32Mi"
            requests:
              cpu: "1m"
              memory: "8Mi"
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 999
            runAsGroup: 999
          ports:
            - name: metrics-port
              containerPort: 9273
          startupProbe:
            httpGet:
              path: /metrics
              port: metrics-port
            failureThreshold: 30
            periodSeconds: 1
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics-port
            initialDelaySeconds: 5
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics-port
            initialDelaySeconds: 5
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 2
          volumeMounts:
            - mountPath: /etc/telegraf
              name: telegraf-conf
      volumes:
        - name: nginx-tmp
          emptyDir:
            sizeLimit: 64Mi
        - name: telegraf-conf
          configMap:
            name: telegraf-conf
...
---
kind: Service
apiVersion: v1
metadata:
  name: qrgenerator-front
  namespace: "qrgenerator"
  labels:
    app.kubernetes.io/name: qrgenerator-service-front
  annotations:
    traefik.ingress.kubernetes.io/service.passhostheader: "true"
spec:
  ports:
    - name: frontend-port
      protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    app.kubernetes.io/name: qrgenerator-front
...
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: qrgenerator
  namespace: "qrgenerator"
  labels:
    app.kubernetes.io/name: qrgenerator-ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: qr.againddm.keenetic.pro
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: qrgenerator-front
                port:
                  number: 8080
  defaultBackend:
    service:
      name: qrgenerator-front
      port:
        number: 8080
...
