{{ if .Values.frontend.config.metrics.scrape }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Chart.Name }}-front-telegraf-conf"
data:
  telegraf.conf: |
    [global_tags]
      project = "{{ .Chart.Name }}"
    [agent]
      interval = "30s"
      logtarget = "stderr"
      omit_hostname = false
    [[inputs.nginx]]
      urls = ["http://localhost:8000/basic_status"]
      response_timeout = "5s"
    [[outputs.prometheus_client]]
      listen = ":{{ .Values.frontend.config.metrics.port }}"
      metric_version = 2
      path = "{{ .Values.frontend.config.metrics.path }}"
      expiration_interval = "120s"
      collectors_exclude = ["gocollector", "process"]
...
{{end}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Chart.Name }}-front"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}-front"
spec:
  {{- if not .Values.frontend.hpa.enabled }}
  replicas: {{ .Values.frontend.deployment.replicas }}
  {{- end }}
  strategy:
    {{- toYaml .Values.frontend.deployment.strategy | nindent 4 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Chart.Name }}-front"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Chart.Name }}-front"
      annotations:
        prometheus.io/scrape: "{{ .Values.frontend.config.metrics.scrape }}"
        prometheus.io/path: "{{ .Values.frontend.config.metrics.path }}"
        prometheus.io/port: "{{ .Values.frontend.config.metrics.port }}"
    spec:
      containers:
        - name: front-nginx
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          image: "\
            {{ .Values.frontend.deployment.containers.front.image.repository }}:\
            {{ .Values.frontend.deployment.containers.front.image.tag }}"
          resources:
            {{- toYaml .Values.frontend.deployment.containers.front.resources | nindent 12 }}
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 101
            runAsGroup: 101
          ports:
            - name: frontend-port
              containerPort: 8080
            - name: service-port
              containerPort: 8000
          startupProbe:
            httpGet:
              path: /ping
              port: service-port
            failureThreshold: 30
            periodSeconds: 1
          livenessProbe:
            httpGet:
              path: /ping
              port: service-port
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: frontend-port
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 3
            failureThreshold: 3
          volumeMounts:
            - mountPath: /tmp
              name: nginx-tmp
          terminationMessagePolicy: FallbackToLogsOnError
        {{- if .Values.frontend.config.metrics.scrape }}
        - name: telegraf-sidecar
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          image: "\
            {{ .Values.frontend.deployment.containers.telegraf.image.repository }}:\
            {{ .Values.frontend.deployment.containers.telegraf.image.tag }}"
          command:
            - "telegraf"
          args:
            - "--config"
            - "/etc/telegraf/telegraf.conf"
          resources:
            {{- toYaml .Values.frontend.deployment.containers.telegraf.resources | nindent 12 }}
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 999
            runAsGroup: 999
          ports:
            - name: metrics-port
              containerPort: {{ .Values.frontend.config.metrics.port }}
          startupProbe:
            httpGet:
              path: "{{ .Values.frontend.config.metrics.path }}"
              port: metrics-port
            failureThreshold: 30
            periodSeconds: 2
          livenessProbe:
            httpGet:
              path: "{{ .Values.frontend.config.metrics.path }}"
              port: metrics-port
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "{{ .Values.frontend.config.metrics.path }}"
              port: metrics-port
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 2
            failureThreshold: 3
          volumeMounts:
            - mountPath: /etc/telegraf
              name: telegraf-conf
          terminationMessagePolicy: FallbackToLogsOnError
        {{- end }}
      volumes:
        - name: nginx-tmp
          emptyDir:
            sizeLimit: 32Mi
        {{- if .Values.frontend.config.metrics.scrape }}
        - name: telegraf-conf
          configMap:
            name: telegraf-conf
        {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Chart.Name }}-front"
                topologyKey: kubernetes.io/hostname
...
{{ if .Values.frontend.hpa.enabled }}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: "{{ .Chart.Name }}-front-hpa"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{ .Chart.Name }}-front"
  minReplicas: {{ .Values.frontend.hpa.minReplicas }}
  maxReplicas: {{ .Values.frontend.hpa.maxReplicas }}
  metrics:
    {{- toYaml .Values.frontend.hpa.metrics | nindent 4 }}
...
{{ end }}
---
kind: Service
apiVersion: v1
metadata:
  name: "{{ .Chart.Name }}-front"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}-front"
spec:
  ports:
    - name: frontend-port
      protocol: TCP
      port: {{ .Values.frontend.service.port }}
      targetPort: frontend-port
  selector:
    app.kubernetes.io/name: "{{ .Chart.Name }}-front"
...
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "{{ .Chart.Name }}-front"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}-front"
  annotations:
    kubernetes.io/ingress.class: "{{ .Values.frontend.ingress.class }}"
spec:
  rules:
    - host: "{{ .Values.frontend.ingress.host }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{ .Chart.Name }}-front"
                port:
                  number: {{ .Values.frontend.service.port }}
  defaultBackend:
    service:
      name: "{{ .Chart.Name }}-front"
      port:
        number: {{ .Values.frontend.service.port }}
...
